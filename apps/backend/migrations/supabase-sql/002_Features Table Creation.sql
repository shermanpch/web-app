-- ============================================================
-- Script to Create/Reset the 'features' Table
-- ============================================================
-- Purpose: Defines the distinct features or actions within the application
--          that are subject to usage quotas based on membership tiers.
-- Idempotent: Yes - Drops existing table and its dependent objects (like policies)
--          before recreating.
-- WARNING: Dropping the table with CASCADE will also drop dependent objects
--          (like foreign key constraints in 'membership_feature_quota' or 'divinations').
--          Run with caution, especially on existing databases.
-- ============================================================
-- ** Step 1: Drop Existing Table (and automatically drop dependent policies/constraints) **
-- Use CASCADE to remove dependencies cleanly.
DROP TABLE IF EXISTS public.features CASCADE;

-- ** Step 2: Create the 'features' Table **
CREATE TABLE
    public.features (
        -- Unique identifier for the feature. Auto-incrementing integer.
        id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        -- Unique programmatic name/key for the feature (e.g., 'basic_divination').
        -- Used in application logic to identify the feature being used.
        name TEXT NOT NULL UNIQUE,
        -- Optional human-readable description of the feature.
        description TEXT NULL,
        -- Timestamp when this feature definition was created.
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW ()
    );

-- Add comments to the table and columns for clarity
COMMENT ON TABLE public.features IS 'Defines distinct features or actions subject to usage quotas.';

COMMENT ON COLUMN public.features.id IS 'Primary key for the feature.';

COMMENT ON COLUMN public.features.name IS 'Unique programmatic name for the feature (e.g., ''basic_divination'').';

COMMENT ON COLUMN public.features.description IS 'User-friendly description of the feature.';

COMMENT ON COLUMN public.features.created_at IS 'Timestamp when the feature was added.';

-- ** Step 3: Enable Row Level Security (RLS) **
ALTER TABLE public.features ENABLE ROW LEVEL SECURITY;

-- Force RLS for table owners as well (good practice for security consistency)
ALTER TABLE public.features FORCE ROW LEVEL SECURITY;

-- ** Step 4: Create RLS Policies **
-- Policies are automatically dropped by `DROP TABLE ... CASCADE`, so we just recreate them.
-- Policy 1: Allow authenticated users to read all features.
-- Feature definitions are generally considered public configuration information.
CREATE POLICY "Allow authenticated users to read features" ON public.features FOR
SELECT
    USING (auth.role () = 'authenticated');

-- Checks if the user is logged in
-- Policy 2: Allow full access for users with the 'service_role'.
-- This is crucial for backend operations (migrations, admin tasks) that need to bypass RLS.
CREATE POLICY "Allow service_role full access" ON public.features FOR ALL -- Applies to SELECT, INSERT, UPDATE, DELETE
USING (auth.role () = 'service_role')
WITH
    CHECK (auth.role () = 'service_role');

-- ** Step 5: Seed Initial Data **
-- Insert the initial features relevant to the divination app.
-- ON CONFLICT DO NOTHING ensures this doesn't error if run multiple times
-- due to the UNIQUE constraint on the 'name' column.
INSERT INTO
    public.features (name, description)
VALUES
    (
        'basic_divination',
        'Standard I Ching divination request.'
    ) ON CONFLICT (name) DO NOTHING;

INSERT INTO
    public.features (name, description)
VALUES
    (
        'premium_divination',
        'Enhanced or premium I Ching divination request (e.g., deep dive).'
    ) ON CONFLICT (name) DO NOTHING;

-- Add other features here if needed in the future, e.g.:
-- INSERT INTO public.features (name, description) VALUES
--     ('save_reading', 'Ability to save a reading to history.')
-- ON CONFLICT (name) DO NOTHING;
-- ** Step 6: Grant Permissions **
-- Grant SELECT permission to the 'authenticated' role. This is necessary for
-- users (or the frontend application logic) to be able to read feature information.
GRANT
SELECT
    ON TABLE public.features TO authenticated;

-- Grant necessary permissions to the 'service_role'.
GRANT ALL ON TABLE public.features TO service_role;

GRANT USAGE ON SEQUENCE public.features_id_seq TO service_role;

-- ============================================================
-- End of Script for 'features'
-- ============================================================