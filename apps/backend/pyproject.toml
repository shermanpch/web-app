[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "backend"
version = "0.1.0"
description = "Backend for web-app"
requires-python = ">=3.10"
classifiers = ["Programming Language :: Python :: 3", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent"]

[tool.black]
line-length = 88

[tool.ruff]
# Set the maximum line length to match Black
line-length = 88
# Target Python 3.10+
target-version = "py310"

[tool.ruff.lint]
# Enable these rule categories
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # Pyflakes (unused imports, variables, etc.)
    "I",   # isort (import sorting)
    "UP",  # pyupgrade (modern Python syntax)
    "B",   # flake8-bugbear (common bugs and design problems)
    "C4",  # flake8-comprehensions (better list/dict comprehensions)
    "SIM", # flake8-simplify (simplify code)
]

# Ignore these specific rules globally
ignore = [
    "E501",  # Line too long (handled by formatter)
    "SIM108", # Use ternary operator (can reduce readability)
    "B008",  # Do not perform function call in argument defaults (FastAPI dependency injection pattern)
    "B904",  # Within except clause, raise exceptions with `raise ... from err` (intentional for API security)
]

# Allow fix for all enabled rules (when `--fix`) is provided
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, use double quotes for strings
quote-style = "double"
# Like Black, indent with spaces, rather than tabs
indent-style = "space"
# Like Black, respect magic trailing commas
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending
line-ending = "auto"

[tool.ruff.lint.isort]
# Configure ruff's isort to be compatible with black
force-single-line = false
lines-after-imports = 2
known-first-party = ["app", "tests"]
known-third-party = ["fastapi", "supabase", "pydantic", "pytest"]
split-on-trailing-comma = true
combine-as-imports = true
force-sort-within-sections = true

[tool.ruff.lint.per-file-ignores]
# Allow unused imports in __init__.py files (they're often re-exports)
"__init__.py" = ["F401"]
"*/__init__.py" = ["F401"]
# Test files can have some additional flexibility
"tests/**/*.py" = [
    "S101",    # Use of assert detected (pytest uses assertions)
    "PLR2004", # Magic value used in comparison
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "integration: marks tests as integration tests that interact with external systems"
]