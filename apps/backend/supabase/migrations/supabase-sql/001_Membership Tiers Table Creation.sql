-- ============================================================
-- Script to Create/Reset the 'membership_tiers' Table
-- ============================================================
-- Purpose: Defines the available membership tiers (e.g., free, premium).
-- Idempotent: Yes - Drops existing table and its dependent objects (like policies)
--          before recreating.
-- WARNING: Dropping the table with CASCADE will also drop dependent objects
--          (like foreign key constraints in other tables referencing this one).
--          Run with caution, especially on existing databases.
-- ============================================================
-- ** Step 1: Drop Existing Table (and automatically drop dependent policies/constraints) **
-- Use CASCADE to remove dependencies cleanly.
DROP TABLE IF EXISTS public.membership_tiers CASCADE;

-- ** Step 2: Create the 'membership_tiers' Table **
CREATE TABLE
    public.membership_tiers (
        -- Unique identifier for the membership tier. Auto-incrementing integer.
        id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        -- Unique name/key for the tier (e.g., 'free', 'premium'). Used in application logic.
        name TEXT NOT NULL UNIQUE,
        -- Optional human-readable description of the tier.
        description TEXT NULL,
        -- Timestamp when this tier definition was created.
        created_at TIMESTAMPTZ NOT NULL DEFAULT NOW ()
    );

-- Add comments to the table and columns for clarity
COMMENT ON TABLE public.membership_tiers IS 'Defines the different membership levels available in the application.';

COMMENT ON COLUMN public.membership_tiers.id IS 'Primary key for the membership tier.';

COMMENT ON COLUMN public.membership_tiers.name IS 'Unique programmatic name for the tier (e.g., ''free'', ''premium'').';

COMMENT ON COLUMN public.membership_tiers.description IS 'User-friendly description of the tier.';

COMMENT ON COLUMN public.membership_tiers.created_at IS 'Timestamp when the tier was added.';

-- ** Step 3: Enable Row Level Security (RLS) **
ALTER TABLE public.membership_tiers ENABLE ROW LEVEL SECURITY;

-- Force RLS for table owners as well (good practice for security consistency)
ALTER TABLE public.membership_tiers FORCE ROW LEVEL SECURITY;

-- ** Step 4: Create RLS Policies **
-- Policies are automatically dropped by `DROP TABLE ... CASCADE`, so we just recreate them.
-- Policy 1: Allow authenticated users to read all membership tiers.
-- Tiers are generally considered public configuration information.
CREATE POLICY "Allow authenticated users to read membership tiers" ON public.membership_tiers FOR
SELECT
    USING (auth.role () = 'authenticated');

-- Checks if the user is logged in
-- Policy 2: Allow full access for users with the 'service_role'.
-- This is crucial for backend operations (migrations, admin tasks) that need to bypass RLS.
CREATE POLICY "Allow service_role full access" ON public.membership_tiers FOR ALL -- Applies to SELECT, INSERT, UPDATE, DELETE
USING (auth.role () = 'service_role')
WITH
    CHECK (auth.role () = 'service_role');

-- ** Step 5: Seed Initial Data **
-- Insert the basic 'free' and 'premium' tiers.
-- ON CONFLICT DO NOTHING ensures this doesn't error if run multiple times
-- due to the UNIQUE constraint on the 'name' column.
INSERT INTO
    public.membership_tiers (name, description)
VALUES
    (
        'free',
        'Basic free membership with limited features.'
    ) ON CONFLICT (name) DO NOTHING;

INSERT INTO
    public.membership_tiers (name, description)
VALUES
    (
        'premium',
        'Paid membership with enhanced features and higher quotas.'
    ) ON CONFLICT (name) DO NOTHING;

-- ** Step 6: Grant Permissions **
-- Grant SELECT permission to the 'authenticated' role. This is necessary for
-- users to be able to read the tier information as allowed by the RLS policy.
GRANT
SELECT
    ON TABLE public.membership_tiers TO authenticated;

-- Grant necessary permissions to the 'service_role'. While service_role often bypasses
-- checks, explicit grants ensure clarity and function correctly in all contexts.
GRANT ALL ON TABLE public.membership_tiers TO service_role;

GRANT USAGE ON SEQUENCE public.membership_tiers_id_seq TO service_role;

-- ============================================================
-- End of Script for 'membership_tiers'
-- ============================================================