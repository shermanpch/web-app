name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # Common environment variables used across jobs
  HOST: "0.0.0.0"
  PORT: "8000"
  FRONTEND_URL: "http://localhost:3000"
  NEXT_PUBLIC_BACKEND_API_URL: "http://localhost:8000"
  INTERNAL_BACKEND_API_URL: "http://localhost:8000"

  # To ensure frontend use a different port
  FRONTEND_PORT: "3000"

  # Using GitHub secrets for sensitive data
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
  SUPABASE_JWT_SECRET: ${{ secrets.SUPABASE_JWT_SECRET }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  TEST_EMAIL: ${{ secrets.TEST_EMAIL }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  OPENAI_MODEL: ${{ secrets.OPENAI_MODEL }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      - name: Install dependencies
        run: npm install
      - name: Lint
        run: npm run lint

  build-and-test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      - name: Install Node dependencies
        run: npm install
      
      # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.x'
          cache: 'pip'
      - name: Install backend dependencies
        working-directory: ./apps/backend
        run: pip install -r requirements.txt
      
      # Build frontend
      - name: Build frontend
        run: npm run build
      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: apps/frontend/.next
          retention-days: 1
      
      # Start services for testing
      - name: Start backend server
        working-directory: ./apps/backend
        run: |
          python main.py &
          
          # Health check to verify the server started successfully
          MAX_RETRIES=30
          RETRY_INTERVAL=2
          HEALTH_URL="http://localhost:${{ env.PORT }}/health"
          
          echo "Waiting for backend server to start..."
          for i in $(seq 1 $MAX_RETRIES); do
            if curl -s -f $HEALTH_URL > /dev/null 2>&1 || curl -s -f "http://localhost:${{ env.PORT }}" > /dev/null 2>&1; then
              echo "Backend server is up and running!"
              break
            fi
            
            if [ $i -eq $MAX_RETRIES ]; then
              echo "Error: Backend server failed to start after $(($MAX_RETRIES * $RETRY_INTERVAL)) seconds"
              exit 1
            fi
            
            echo "Attempt $i failed, retrying in $RETRY_INTERVAL seconds..."
            sleep $RETRY_INTERVAL
          done
        env:
          PORT: ${{ env.PORT }}
      
      - name: Start frontend server
        working-directory: ./apps/frontend
        run: |
          PORT=${{ env.FRONTEND_PORT }} npm run start &
          
          # Health check to verify the server started successfully
          MAX_RETRIES=30
          RETRY_INTERVAL=2
          HEALTH_URL="http://localhost:${{ env.FRONTEND_PORT }}"
          
          echo "Waiting for frontend server to start..."
          for i in $(seq 1 $MAX_RETRIES); do
            if curl -s -f $HEALTH_URL > /dev/null; then
              echo "Frontend server is up and running!"
              break
            fi
            
            if [ $i -eq $MAX_RETRIES ]; then
              echo "Error: Frontend server failed to start after $(($MAX_RETRIES * $RETRY_INTERVAL)) seconds"
              exit 1
            fi
            
            echo "Attempt $i failed, retrying in $RETRY_INTERVAL seconds..."
            sleep $RETRY_INTERVAL
          done
      
      # Run backend tests
      - name: Run backend tests
        working-directory: ./apps/backend
        run: pytest

  security-scan:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Run npm audit
        run: npm audit --audit-level=high || echo "Security vulnerabilities found"
        
      - name: Run Python security check
        working-directory: ./apps/backend
        run: |
          pip install safety
          safety check -r requirements.txt || echo "Security vulnerabilities found" 